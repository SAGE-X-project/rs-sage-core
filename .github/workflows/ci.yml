name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta, nightly]
        exclude:
          # Skip nightly on Windows and macOS for now
          - os: windows-latest
            rust: nightly
          - os: macos-latest
            rust: nightly
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Configure Rust cache
      uses: Swatinem/rust-cache@v2

    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install pkg-config openssl
        echo "PKG_CONFIG_PATH=/opt/homebrew/lib/pkgconfig" >> $GITHUB_ENV

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run Clippy
      run: cargo clippy --all-targets --features wasm -- -D warnings

    - name: Build
      run: cargo build --verbose --features wasm

    - name: Run tests
      run: cargo test --verbose --features wasm

    - name: Run doctests
      run: cargo test --doc --features wasm

    - name: Build FFI
      run: cargo build --release --features ffi

    - name: Test FFI examples (Linux only)
      if: runner.os == 'Linux'
      run: |
        cd examples/ffi
        make
        ./basic || true  # Don't fail if example doesn't work in CI

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  wasm-build:
    name: WASM Build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown

    - name: Configure Rust cache
      uses: Swatinem/rust-cache@v2

    - name: Install wasm-pack
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

    - name: Build WASM
      run: wasm-pack build --target web --out-dir pkg --features wasm

    - name: Test WASM build
      run: |
        ls -la pkg/
        test -f pkg/sage_crypto_core_bg.wasm
        test -f pkg/sage_crypto_core.js

  cross-compile:
    name: Cross Compilation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-gnu
          - wasm32-unknown-unknown
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Configure Rust cache
      uses: Swatinem/rust-cache@v2

    - name: Install cross
      run: cargo install cross

    - name: Install system dependencies
      if: matrix.target != 'wasm32-unknown-unknown'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-multilib

    - name: Cross compile
      run: |
        if [ "${{ matrix.target }}" = "wasm32-unknown-unknown" ]; then
          cargo build --target ${{ matrix.target }} --features wasm
        else
          cross build --target ${{ matrix.target }} --features ffi
        fi

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Configure Rust cache
      uses: Swatinem/rust-cache@v2

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin

    - name: Generate coverage report
      run: cargo tarpaulin --out xml --all-features

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./cobertura.xml
        fail_ci_if_error: false

  benchmark:
    name: Benchmarks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Configure Rust cache
      uses: Swatinem/rust-cache@v2

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Run benchmarks
      run: cargo bench --all-features

    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      with:
        name: Rust Benchmark
        tool: 'cargo'
        output-file-path: target/criterion/report/index.html
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true